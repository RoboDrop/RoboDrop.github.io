<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-02T17:50:41-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">RoboDrop Automation</title><subtitle>Custom automation for life sciences</subtitle><entry><title type="html">CSV Runtime parameters</title><link href="http://localhost:4000/2024/12/30/Opentrons_CSV.html" rel="alternate" type="text/html" title="CSV Runtime parameters" /><published>2024-12-30T00:00:00-08:00</published><updated>2024-12-30T00:00:00-08:00</updated><id>http://localhost:4000/2024/12/30/Opentrons_CSV</id><content type="html" xml:base="http://localhost:4000/2024/12/30/Opentrons_CSV.html"><![CDATA[<p>Opentrons recently updated their app to accept a CSV as runtime parameters. I did a quick runthrough of the code to see how this works.</p>

<p>The Opentrons App is a great way to get started with liquid handling, however one of the pain points is generating a python file for every run. This can be a intimidating for the python beginner or plain repetitive if you’re using the Opentrons for the same workflow with varying inputs.</p>

<p>One of my workflows involved diluting twist fragments at the plate level, I wrote a python script that would generate another python script when given a CSV file with plate info. This worked fine but it did feel hacky and tended to needlessly fill up the Opentrons app with one time use scripts.</p>

<p>This latest update to the opentrons app (8.0, released Sept 2024) allows you to define your base script, upload it to their app and then vary the input by selecting a CSV file to run the script with. This makes a great user experience for the Scientist that needs their machine to do x job given y data.</p>

<p>To add a CSV parameter funcitonality define the add_parameters and pass it an instance of the API parameters</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">opentrons</span> <span class="kn">import</span> <span class="n">protocol_api</span>
<span class="kn">import</span> <span class="n">csv</span>

<span class="n">requirements</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">apiLevel</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2.21</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">add_parameters</span><span class="p">(</span><span class="n">parameters</span><span class="p">:</span> <span class="n">protocol_api</span><span class="p">.</span><span class="n">Parameters</span><span class="p">):</span>
    <span class="n">parameters</span><span class="p">.</span><span class="nf">add_csv_file</span><span class="p">(</span>
        <span class="n">variable_name</span><span class="o">=</span><span class="sh">"</span><span class="s">your_csv_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">display_name</span><span class="o">=</span><span class="sh">"</span><span class="s">csv_display</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">csv_description.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Doing this allows you to access your CSV file in the main run() block. From here you can add whatever functions you would like to process the file and vary your pipetting steps.</p>

<p>The following script can accept a CSV file that accompanies every Twist Bioscience plate order which has the well location in the 4th column, the insert length in the 5th column and the nanograms in the 9th column. This script can live on your opentrons App and be used and reused to dilute every twist plate you receive to 50fmol/uL with varying CSV inputs.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">opentrons</span> <span class="kn">import</span> <span class="n">protocol_api</span>
<span class="kn">import</span> <span class="n">csv</span>

<span class="n">requirements</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">apiLevel</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2.21</span><span class="sh">"</span><span class="p">}</span>


<span class="c1"># Define runtime parameters
</span><span class="k">def</span> <span class="nf">add_parameters</span><span class="p">(</span><span class="n">parameters</span><span class="p">:</span> <span class="n">protocol_api</span><span class="p">.</span><span class="n">Parameters</span><span class="p">):</span>
    <span class="n">parameters</span><span class="p">.</span><span class="nf">add_csv_file</span><span class="p">(</span>
        <span class="n">variable_name</span><span class="o">=</span><span class="sh">"</span><span class="s">twist_data</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">display_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Twist Manifest CSV</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Twist Manifest CSV.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>


<span class="c1"># Main protocol function
</span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">protocol</span><span class="p">:</span> <span class="n">protocol_api</span><span class="p">.</span><span class="n">ProtocolContext</span><span class="p">):</span>
    <span class="c1"># Labware setup
</span>    <span class="n">water_reservoir</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_labware</span><span class="p">(</span><span class="sh">'</span><span class="s">nest_1_reservoir_195ml</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">tiprack_300</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_labware</span><span class="p">(</span><span class="sh">'</span><span class="s">opentrons_96_tiprack_300ul</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">11</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">tiprack_20</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_labware</span><span class="p">(</span><span class="sh">'</span><span class="s">opentrons_96_tiprack_20ul</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">9</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">well_plate</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_labware</span><span class="p">(</span><span class="sh">'</span><span class="s">nest_96_wellplate_200ul_flat</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># Pipette setup
</span>    <span class="n">p300</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_instrument</span><span class="p">(</span><span class="sh">'</span><span class="s">p300_single_gen2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">tip_racks</span><span class="o">=</span><span class="p">[</span><span class="n">tiprack_300</span><span class="p">])</span>
    <span class="n">p20</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">load_instrument</span><span class="p">(</span><span class="sh">'</span><span class="s">p20_single_gen2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">,</span> <span class="n">tip_racks</span><span class="o">=</span><span class="p">[</span><span class="n">tiprack_20</span><span class="p">])</span>

    <span class="c1"># Constants
</span>    <span class="n">TARGET_CONCENTRATION</span> <span class="o">=</span> <span class="mi">50</span>  <span class="c1"># fmol/µL
</span>    <span class="n">DNA_MW</span> <span class="o">=</span> <span class="mi">650</span>  <span class="c1"># Approximate molecular weight of 1 bp DNA in g/mol
</span>
    <span class="c1"># Function to calculate water volume needed
</span>    <span class="k">def</span> <span class="nf">calculate_water_volume</span><span class="p">(</span><span class="n">yield_ng</span><span class="p">,</span> <span class="n">insert_length</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Calculate concentration in fmol/µL
</span>            <span class="n">dna_conc_fmol_per_ul</span> <span class="o">=</span> <span class="p">(</span><span class="n">yield_ng</span> <span class="o">/</span> <span class="n">insert_length</span><span class="p">)</span> <span class="o">/</span> <span class="n">DNA_MW</span> <span class="o">*</span> <span class="mf">1e6</span>
            <span class="k">if</span> <span class="n">dna_conc_fmol_per_ul</span> <span class="o">&lt;=</span> <span class="n">TARGET_CONCENTRATION</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>  <span class="c1"># No water needed
</span>            <span class="n">dilution_factor</span> <span class="o">=</span> <span class="n">dna_conc_fmol_per_ul</span> <span class="o">/</span> <span class="n">TARGET_CONCENTRATION</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">dilution_factor</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">yield_ng</span> <span class="o">/</span> <span class="n">dna_conc_fmol_per_ul</span>
        <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
            <span class="n">protocol</span><span class="p">.</span><span class="nf">comment</span><span class="p">(</span><span class="sh">"</span><span class="s">Skipping due to invalid data.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="mi">0</span>

        <span class="c1"># Read the CSV file
</span>    <span class="n">csv_file</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">.</span><span class="n">params</span><span class="p">.</span><span class="n">twist_data</span><span class="p">.</span><span class="nb">file</span>
    <span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">reader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
    <span class="c1"># Skip the header row
</span>    <span class="n">header</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">csv_reader</span><span class="p">)</span>
    <span class="n">protocol</span><span class="p">.</span><span class="nf">comment</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">CSV Headers: </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Access data using zero-based indexing
</span>            <span class="n">well_location</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># Assuming 'Well Location' is the 4th column
</span>            <span class="n">yield_ng</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span>  <span class="c1"># Assuming 'Yield (ng)' is the 9th column
</span>            <span class="n">insert_length</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>  <span class="c1"># Assuming 'Insert Length' is the 5th column
</span>
            <span class="c1"># Calculate required water volume
</span>            <span class="n">water_volume</span> <span class="o">=</span> <span class="nf">calculate_water_volume</span><span class="p">(</span><span class="n">yield_ng</span><span class="p">,</span> <span class="n">insert_length</span><span class="p">)</span>
            <span class="n">protocol</span><span class="p">.</span><span class="nf">comment</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Calculated water volume: </span><span class="si">{</span><span class="n">water_volume</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">water_volume</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># Select appropriate pipette
</span>                <span class="n">pipette</span> <span class="o">=</span> <span class="n">p300</span> <span class="k">if</span> <span class="n">water_volume</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="k">else</span> <span class="n">p20</span>
                <span class="n">pipette</span><span class="p">.</span><span class="nf">pick_up_tip</span><span class="p">()</span>
                <span class="n">pipette</span><span class="p">.</span><span class="nf">aspirate</span><span class="p">(</span><span class="n">water_volume</span><span class="p">,</span> <span class="n">water_reservoir</span><span class="p">.</span><span class="nf">wells</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
                <span class="n">pipette</span><span class="p">.</span><span class="nf">dispense</span><span class="p">(</span><span class="n">water_volume</span><span class="p">,</span> <span class="n">well_plate</span><span class="p">[</span><span class="n">well_location</span><span class="p">])</span>
                <span class="n">pipette</span><span class="p">.</span><span class="nf">drop_tip</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">protocol</span><span class="p">.</span><span class="nf">comment</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error processing row: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s"> - Row data: </span><span class="si">{</span><span class="n">row</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Opentrons recently updated their app to accept a CSV as runtime parameters. I did a quick runthrough of the code to see how this works.]]></summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2024/12/26/hello-world.html" rel="alternate" type="text/html" title="Hello World" /><published>2024-12-26T00:00:00-08:00</published><updated>2024-12-26T00:00:00-08:00</updated><id>http://localhost:4000/2024/12/26/hello-world</id><content type="html" xml:base="http://localhost:4000/2024/12/26/hello-world.html"><![CDATA[<p>Obligatory</p>

<p><img src="/assets/images/posts/2024-12-26-hello-world/helloworld.png" alt="Optional Additional Image" /></p>

<p>Obligatory additional content</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Obligatory]]></summary></entry></feed>